"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const user_controller_1 = require("../controllers/user.controller");
const user_service_1 = require("../services/user.service");
const user_repository_1 = require("../repositories/user.repository");
const auth_middleware_1 = require("../middleware/auth.middleware");
const cart_controller_1 = require("../controllers/cart.controller");
const course_service_1 = require("../services/course.service");
const course_repository_1 = require("../repositories/course.repository");
const cart_repository_1 = require("../repositories/cart.repository");
const course_controller_1 = require("../controllers/course.controller");
const order_service_1 = require("../services/order.service");
const order_repository_1 = require("../repositories/order.repository");
const order_controller_1 = require("../controllers/order.controller");
const quiz_controller_1 = require("../controllers/quiz.controller");
const quiz_service_1 = require("../services/quiz.service");
const quiz_repository_1 = require("../repositories/quiz.repository");
const bucketConfig_1 = __importDefault(require("../bucketConfig"));
const review_repository_1 = require("../repositories/review.repository");
const review_service_1 = require("../services/review.service");
const review_controller_1 = require("../controllers/review.controller");
const tutor_repository_1 = require("../repositories/tutor.repository");
const wishlist_controller_1 = require("../controllers/wishlist.controller");
const wishlist_repository_1 = require("../repositories/wishlist.repository");
const router = (0, express_1.Router)();
const userRepository = new user_repository_1.UserRepository();
const courseRepository = new course_repository_1.CourseRepository();
const cartRepository = new cart_repository_1.CartRepository();
const tutorRepository = new tutor_repository_1.TutorRepository();
const wishlistRepository = new wishlist_repository_1.WishlistRepository();
const userService = new user_service_1.UserService(userRepository, courseRepository);
const userController = new user_controller_1.UserController(userService);
const quizRepository = new quiz_repository_1.QuizRepository();
const quizService = new quiz_service_1.QuizService(quizRepository, userRepository, tutorRepository);
const quizController = new quiz_controller_1.QuizController(quizService);
const courseService = new course_service_1.CourseService(courseRepository, cartRepository, userRepository, tutorRepository, wishlistRepository);
const cartController = new cart_controller_1.CartController(courseService);
const wishlistController = new wishlist_controller_1.WishlistController(courseService);
const courseController = new course_controller_1.CourseController(courseService, quizService);
const orderRepository = new order_repository_1.OrderRepository();
const orderService = new order_service_1.OrderService(orderRepository, cartRepository, userRepository, courseRepository);
const orderController = new order_controller_1.OrderController(orderService);
const reviewRepository = new review_repository_1.ReviewRepository();
const reviewService = new review_service_1.ReviewService(reviewRepository, courseRepository);
const reviewController = new review_controller_1.ReviewController(reviewService);
router.get('/cart-items', auth_middleware_1.authMiddleware, cartController.getCartItems.bind(cartController));
router.get('/course-list', auth_middleware_1.authMiddleware, courseController.userCourseList.bind(courseController));
router.get('/order-list', auth_middleware_1.authMiddleware, orderController.orderList.bind(orderController));
router.get('/order-detail/:orderId', auth_middleware_1.authMiddleware, orderController.orderDetail.bind(orderController));
router.get('/course-detail/:courseId', auth_middleware_1.authMiddleware, courseController.courseDetail.bind(courseController));
router.get('/my-courses', auth_middleware_1.authMiddleware, userController.myCourses.bind(userController));
router.get('/favourates', auth_middleware_1.authMiddleware, wishlistController.wishlistPage.bind(wishlistController));
router.get('/quiz-list', auth_middleware_1.authMiddleware, quizController.quizList.bind(quizController));
router.get('/review', auth_middleware_1.authMiddleware, reviewController.Review.bind(reviewController));
router.get('/home-data', userController.homeData.bind(userController));
router.get('/leaderBoard-list', auth_middleware_1.authMiddleware, userController.leaderBoard.bind(userController));
router.post('/initiate-register', userController.initiateUser.bind(userController));
router.post('/verify-user', userController.verifyUser.bind(userController));
router.post('/resend-otp', userController.resendOtp.bind(userController));
// router.post('/register',userController.createUser.bind(userController));
router.post('/login', userController.getUser.bind(userController));
router.post('/googleSign', userController.googleSign.bind(userController));
router.post('/verify-email', userController.verifyEmail.bind(userController));
router.post('/verify-Otp', userController.verifyOtp.bind(userController));
router.post('/forgot-password', userController.forgotPassword.bind(userController));
router.post('/add-cart', auth_middleware_1.authMiddleware, cartController.addToCart.bind(cartController));
router.patch('/remove-cart', auth_middleware_1.authMiddleware, cartController.removeCart.bind(cartController));
router.post('/payment', auth_middleware_1.authMiddleware, orderController.createOrder.bind(cartController));
// router.post('/payment',authMiddleware,orderController.createOrder.bind(cartController));
router.post('/payment-success', auth_middleware_1.authMiddleware, orderController.paymentSuccess.bind(orderController));
router.post('/profile-photo', bucketConfig_1.default.single('profilePhoto'), auth_middleware_1.authMiddleware, userController.profilePhoto.bind(userController));
router.put('/profile-update', auth_middleware_1.authMiddleware, userController.profileUpdate.bind(userController));
router.post('/create-review', auth_middleware_1.authMiddleware, reviewController.createReview.bind(reviewController));
router.patch('/change-password', auth_middleware_1.authMiddleware, userController.changePassword.bind(userController));
router.post('/quiz-result', auth_middleware_1.authMiddleware, quizController.quizResult.bind(quizController));
router.post('/add-wishlist', auth_middleware_1.authMiddleware, wishlistController.addToWishlist.bind(wishlistController));
router.delete('/remove-wishlist/:courseId', auth_middleware_1.authMiddleware, wishlistController.removeWishlist.bind(wishlistController));
router.post('/logout', userController.Logout.bind(userController));
router.use(auth_middleware_1.authMiddleware);
exports.default = router;
//# sourceMappingURL=user.routes.js.map
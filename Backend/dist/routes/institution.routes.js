"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const institute_controller_1 = require("../controllers/institute.controller");
const institute_service_1 = require("../services/institute.service");
const bucketConfig_1 = __importDefault(require("../bucketConfig"));
const course_controller_1 = require("../controllers/course.controller");
const course_service_1 = require("../services/course.service");
const course_repository_1 = require("../repositories/course.repository");
const cart_repository_1 = require("../repositories/cart.repository");
const quiz_controller_1 = require("../controllers/quiz.controller");
const quiz_repository_1 = require("../repositories/quiz.repository");
const quiz_service_1 = require("../services/quiz.service");
const user_repository_1 = require("../repositories/user.repository");
const tutor_repository_1 = require("../repositories/tutor.repository");
const wishlist_repository_1 = require("../repositories/wishlist.repository");
const auth_middleware_1 = require("../middleware/auth.middleware");
const router = (0, express_1.Router)();
const instituteService = new institute_service_1.InstituteService();
const courseRepository = new course_repository_1.CourseRepository();
const cartRepository = new cart_repository_1.CartRepository();
const userRepository = new user_repository_1.UserRepository();
const tutorRepository = new tutor_repository_1.TutorRepository();
const wishlistRepository = new wishlist_repository_1.WishlistRepository();
const courseService = new course_service_1.CourseService(courseRepository, cartRepository, userRepository, tutorRepository, wishlistRepository);
const instituteController = new institute_controller_1.InstitutionController(instituteService);
const quizRepository = new quiz_repository_1.QuizRepository();
const quizService = new quiz_service_1.QuizService(quizRepository, userRepository, tutorRepository);
const quizController = new quiz_controller_1.QuizController(quizService);
const courseController = new course_controller_1.CourseController(courseService, quizService);
router.get('/draft-course', auth_middleware_1.authMiddleware, courseController.draftCourse.bind(courseController));
router.get('/course-list', auth_middleware_1.authMiddleware, courseController.courseList.bind(courseController));
router.get('/course-detail/:courseId', auth_middleware_1.authMiddleware, courseController.courseDetailInstitute.bind(courseController));
router.get('/tutor-list', auth_middleware_1.authMiddleware, instituteController.tutorList.bind(instituteController));
router.get('/quiz-list', auth_middleware_1.authMiddleware, quizController.listQuiz.bind(quizController));
router.get('/quiz-detail', auth_middleware_1.authMiddleware, quizController.quizDetail.bind(quizController));
router.get('/chart-data', auth_middleware_1.authMiddleware, courseController.chartData.bind(courseController));
router.get('/department-list', auth_middleware_1.authMiddleware, instituteController.getDepartment.bind(instituteController));
router.post('/verify-email', instituteController.verifyEmail.bind(instituteController));
router.post('/track-status', instituteController.trackStatus.bind(instituteController));
router.post('/verify-Otp', instituteController.verifyOtp.bind(instituteController));
router.post('/login', instituteController.getInstitution.bind(instituteController));
router.post('/register', bucketConfig_1.default.single('documents'), instituteController.createInstitute.bind(instituteController));
router.post('/create-tutor', auth_middleware_1.authMiddleware, instituteController.createTutor.bind(instituteController));
router.post('/logout', instituteController.Logout.bind(instituteController));
router.post('/add-department', auth_middleware_1.authMiddleware, instituteController.addDepartment.bind(instituteController));
router.patch('/list-course', auth_middleware_1.authMiddleware, courseController.courseAction.bind(courseController));
router.delete('/module-delete', auth_middleware_1.authMiddleware, courseController.moduleDelete.bind(courseController));
exports.default = router;
//# sourceMappingURL=institution.routes.js.map